@page

@using Portal.Web.Common.Extentions
@{
    ViewData["Title"] = "Home";
}

<div id="app">
    <div class="row">
        <div class="col-3">
            <div class="nav flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                <template v-for="(tab,index) in tabs">
                    <a class="nav-link" v-on:click="getChatHistory(tab)" style="border-radius:0;padding-bottom:9px" :id="'v-pills-'+tab.userName+'-tab'" data-toggle="pill" :href="'#v-pills-'+tab.userName" role="tab" :aria-controls="'v-pills-'+tab.userName" aria-selected="false">

                        <i class="fa fa-circle text-success" v-if="tab.connected"></i>
                        <i class="fa fa-circle text-muted" v-if="tab.connected==false"></i>

                        {{tab.userName}}

                    </a>
                </template>

            </div>
        </div>
        <div class="col-9">
            <div class="tab-content" id="v-pills-tabContent">
                <template v-for="(tab,index) in tabs">
                    <div class="tab-pane fade" :id="'v-pills-'+tab.userName" role="tabpanel" :aria-labelledby="'v-pills-'+tab.userName+'-tab'">

                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                {{tab.userName}} {{tab.typingStatus}}
                            </div>
                            <div class="card-body">

                                <input class="form-control" id="message" v-on:keydown="sendTypingStatus(tab)" v-model="message" v-on:keyup.enter.prevent="sendMessage(tab)" />
                                <button class="btn btn-primary m-1" id="send" v-on:click="sendMessage(tab)"> <i class="fa fa-paper-plane"></i></button>

                            </div>

                            <ul class="list-group list-group-flush" v-for="(message,index) in messageList">
                                <li v-bind:class="[{ 'list-group-item-success': (message.fromUserId==fromUserId) }, 'list-group-item']" v-if="message.toUserId==selectedTab.userId || message.fromUserId==selectedTab.userId">
                                    {{message.message}}
                                    <i v-if="message.isSend" class="fa fa-check text-success"></i>
                                </li>
                            </ul>
                        </div>
                    </div>
                </template>
            </div>
        </div>
    </div>

</div>


@section scripts{

    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/lib/lodash.js/lodash.js"></script>

    <script>
        var app = new Vue({
            el: "#app",
            data: {
                tabs: [],
                users: [],
                selectedTab: null,
                connection: "",
                message: "",
                messageList: [],
                fromUserName: "@User.Identity.Name",
                fromUserId:"@User.GetUserId()"
            },
            methods: {
                sendTypingStatus: function (tab) {
                    var vm = this;

                     this.connection.invoke("sendTypingStatus", vm.fromUserId,tab.userId, " is typing... ");
                },
                getChatHistory: function (tab) {
                    var vm = this;
                    vm.selectedTab = tab;


                },
                sendMessage: function (tab) {

                    var vm = this;

                    var msg = {
                        fromUserId: vm.fromUserId,
                        toUserId:tab.userId,
                        message: vm.message,
                        fromUserName: vm.fromUserName,
                        status: "",
                        isSend: false,
                        isDelivered:false
                    };

                    vm.messageList.splice(0, 0, msg);

                     var index = vm.messageList.length - 1;

                    this.connection.invoke("SendMessage", vm.fromUserId, tab.userId, vm.message)
                        .catch(err =>
                            console.error(err.toString())
                        )
                    .then(function () {

                        console.log("message sent." + vm.message);
                        vm.messageList[0].isSend = true;

                    });
                }
            },
            created: function () { },
            mounted: function () {
                var vm = this;

                $.ajax({ url: "/api/user", method: "GET" })
                    .done(function (data) {
                        vm.users = data

                        for (var i = 0; i < vm.users.length; i++) {
                            var newTab = {
                                userName: vm.users[i].userName,
                                userId: vm.users[i].id,
                                unread: 0,
                                connected: false,
                                typingStatus:""
                            };
                            vm.tabs.push(newTab);
                        }

                    }).fail(function () {
                        //toastr.error("Can not add new bug!");
                    }).always(function () {
                        //vm.clearData();
                    });

                vm.connection = new signalR
                    .HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .build();

                var notTypingChecker = function timeout() {
                            setTimeout(function () {
                    //vm.connection.invoke("sendTypingStatus", vm.fromUserId,vm.selectedTab.userId, "");
                                if (vm.selectedTab!=null) {
                                    vm.selectedTab.typingStatus = "";
                                }
                                
                    timeout();
                }, 5000);
                }
                notTypingChecker();

                vm.connection.on('updateUserStatus', function (user, IsConnected) {
                    var userTab = _.findIndex(vm.tabs, function (o) { return o.userName == user; });
                    if (userTab != -1) {
                        vm.tabs[userTab].connected = IsConnected;
                    }
                });

                vm.connection.on('updateTypingStatus', function (fromUserId, toUserId, typingStatus) {

                    var userTab = _.findIndex(vm.tabs, function (o) {

                         return o.userId == fromUserId;
                     });

                    if (userTab != -1) {
                        vm.tabs[userTab].typingStatus = typingStatus;
                    }
                });

                vm.connection.on("updateMessages", function (fromUserId, toUserId,message) {

                    var msg = {
                        fromUserId: fromUserId,
                        toUserId: toUserId,
                        message: message
                    };

                    vm.messageList.splice(0, 0, msg)
                    console.log(msg.fromUserId + " , "+msg.toUserId+" , "+msg.message);

                });

                vm.connection.start();
            }
        });
    </script>
}
